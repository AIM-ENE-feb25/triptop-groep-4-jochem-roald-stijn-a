@startuml
title C4 Class Diagram: Externe services die niet beschikbaar zijn

'hide circle
'skinparam linetype ortho

top to bottom direction

package "controller" {
    class FlightsController {
        getAirportId(query: String): ResponseEntity<String>
        getFlightPrice(origin: String, destination: String, departureDate: String, returnDate: String): ResponseEntity<Double>
    }
}

package "service" {
    interface FlightsService {
        getAirportId(query: String): String
        getFlightPrice(origin: String, destination: String, departureDate: String, returnDate: String): double
    }

    class FlightsServiceImpl {
        rapidapiKey: String
        getAirportId(query: String): String
        getFlightPrice(origin: String, destination: String, departureDate: String, returnDate: String): double
        getCommonHeaders(): HashMap<String, String>
    }
}

package "api" {
    interface ExternalAPIHandler {
        sendRequest(request: Request, dataMayGetOutdated: boolean): Optional<Response>
    }

    class ExternalAPIHandlerImpl {
        sendRequest(request: Request, dataMayGetOutdated: boolean): Optional<Response>
        callExternalAPI(request: Request): Optional<Response>
    }

    class Request <<record>> {
        url: String
        headers: HashMap<String, String>
    }

    class Response <<record>> {
        statusCode: int
        body: JSONObject
    }

    enum Origin {
        EXTERNAL_API, REDIS_CACHE
    }
}

package "repository" {
    interface CacheRepository {
        save(url: String, response: Response, keepForSeconds: Integer): void
        get(url: String): Optional<Response>
    }

    class RedisCacheRepositoryImpl {
        unifiedJedis: UnifiedJedis
        save(url: String, response: Response, keepForSeconds: Integer): void
        get(url: String): Optional<Response>
    }
}

' package "exception" {
'     class GlobalExceptionHandler {
'         handleNotImplementedException(e: NotImplementedException): ResponseEntity<String>
'         handleNotFoundException(e: NotFoundException): ResponseEntity<String>
'         handleRequestFailedException(e: RequestFailedException): ResponseEntity<String>
'     }

'     class NotFoundException {
'     }

'     class NotImplementedException {
'     }

'     class RequestFailedException {
'     }
' }

FlightsController --> "flightService 1" FlightsService
FlightsServiceImpl .u.|> FlightsService
FlightsServiceImpl --> "externalAPIHandler 1" ExternalAPIHandler
ExternalAPIHandlerImpl .u.|> ExternalAPIHandler
ExternalAPIHandlerImpl --> "cacheRepository 1" CacheRepository
RedisCacheRepositoryImpl .u.|> CacheRepository
Response ..> "origin 1" Origin

@enduml
